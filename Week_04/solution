1、柠檬找零
class Solution {
public:
    bool lemonadeChange(vector<int>& bills) {
        int five = 0;
        int ten = 0;
        for (int i = 0; i < bills.size(); ++i) {
            int price = bills[i];
            if (price == 5) {
                five++;
            } else if (price == 10) {
                five--;
                ten++;
            } else if (price == 20) {
                if (ten > 0) {
                    ten--;
                    five--;
                } else {
                    five -= 3;
                }
            }

            if (five < 0 || ten < 0) return false;
        }

        return true;
    }
};

2、买卖股票的最佳时机 II
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        // dp[i][1]  第i天持有的最多现金
        // dp[i][0] 第i天持有股票后的最多现金
        int n = prices.size();
        vector<vector<int>> dp(n, vector<int>(2, 0));
        dp[0][0] -= prices[0]; // 持股票

        for (int i = 1; i < n; ++i) {
            // 第i天持股票所剩最多现金 = max(第i - 1天持有股票所剩现金，第i-1天持现金 - 买第i天的股票)
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i]);
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i]);
        }

        return max(dp[n - 1][0], dp[n - 1][1]);
    }
};

3、分发饼干
class Solution {
public:
    int findContentChildren(vector<int>& g, vector<int>& s) {
        sort(g.begin(), g.end());
        sort(s.begin(), s.end());
        int count = 0;
        int gSize = g.size();
        int sSize = s.size();
        int j = 0; // 指向g
        for (int i = 0; i < sSize && j < gSize; ++i) {
            if (g[j] <= s[i]) {
                count++;
                j++;
            }
        }

        return count;
    }
};